/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema for the UI Schema
 */
export type UISchema = Layout;
export type LayoutElement = Control | Layout | HTMLRenderer | Divider | Button | Buttongroup;
/**
 * If set to true, the checkbox(-group) it was specified for will be rendered as switch(es)
 */
export type SwitchEs = boolean;
/**
 * Condition to be applied
 */
export type ShowOnFunctionType =
    | 'EQUALS'
    | 'NOT_EQUALS'
    | 'GREATER'
    | 'GREATER_OR_EQUAL'
    | 'SMALLER_OR_EQUAL'
    | 'SMALLER'
    | 'LONGER';
/**
 * Submit or Reset
 */
export type TheButtonsType = 'submit' | 'reset';
/**
 * The buttons text
 */
export type Text = string;
/**
 * The elements of the layout
 */
export type Elements = LayoutElement[];

/**
 * The different layouts
 */
export interface Layout {
    /**
     * The ID of the layout
     */
    $id?: string;
    /**
     * May contain a schema reference to the ui schema
     */
    $schema?: string;
    type: 'VerticalLayout' | 'HorizontalLayout' | 'Group';
    elements: Elements;
    showOn?: ShowOnProperty;
    /**
     * Adds a label for groups (only for type=Group)
     */
    label?: string;
    /**
     * Additional options
     */
    options?: {
        /**
         * The layout's CSS classes
         */
        cssClass?: string;
        [k: string]: unknown;
    };
}
/**
 * Contains a form element, e. g. a text input
 */
export interface Control {
    type: 'Control';
    /**
     * A json pointer referring to the form element in the forms json schema
     */
    scope: string;
    /**
     * Format for string fields
     */
    format?:
        | 'time'
        | 'date'
        | 'date-time'
        | 'email'
        | 'password'
        | 'search'
        | 'url'
        | 'tel'
        | 'color';
    options?: Options;
    showOn?: ShowOnProperty;
}
/**
 * Gives multiple options to configure the element
 */
export interface Options {
    /**
     * Defines whether the fields label is activated
     */
    label?: boolean;
    /**
     * If set true, textarea will be shown instead of textfield.
     *  Alternatively can be set to the number of wanted lines
     */
    multi?: boolean | number;
    /**
     * If set to true, numberfield will appear as star-rating-field
     */
    rating?: boolean;
    /**
     * Will be shown as placeholder in form fields, if supported by field
     */
    placeholder?: string;
    /**
     * Will be shown as placeholder in file upload field when file drag and drop
     */
    'drop-placeholder'?: string;
    /**
     * Allows the upload of multiple files with fileupload
     */
    allowMultipleFiles?: boolean;
    /**
     * The accepted File Types
     */
    acceptedFileType?: string;
    enumTitles?: TitlesForEnum;
    /**
     * If set to true, a group of radiobuttons will be shown instead of the select field
     */
    radiobuttons?: boolean;
    /**
     * Radiobutton-/Checkbox group will be stacked if set to true
     */
    stacked?: boolean;
    switch?: SwitchEs;
    /**
     * Will be appended to field
     */
    append?: string;
    /**
     * Will be rendered as tags-Field
     */
    tags?: {
        enabled?: boolean;
        pills?: boolean;
        [k: string]: unknown;
    };
    /**
     * Specifies what should be autocompleted by the browser. Possible values are listed here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values
     */
    autocomplete?: string;
    /**
     * Set the text-align of input fields
     */
    textAlign?: 'left' | 'right' | 'center' | 'start' | 'end';
    /**
     * The Controls CSS classes
     */
    cssClass?: string;
    /**
     * Sets the visibility of the field to hidden. For example useful in combination with a DateTime field with default:"$now" to create a hidden timestamp.
     */
    hidden?: boolean;
    [k: string]: unknown;
}
/**
 * If the text in a enums select field is supposed to differ from the keys, they can be specified as properties of this object. The value in the enum must be used as property name
 */
export interface TitlesForEnum {
    /**
     * This interface was referenced by `TitlesForEnum`'s JSON-Schema definition
     * via the `patternProperty` "".
     */
    [k: string]: string;
}
/**
 * Show field depending on value of other field
 */
export interface ShowOnProperty {
    /**
     * The field this field depends on
     */
    scope: string;
    type: ShowOnFunctionType;
    /**
     * The value the field from scope is compared against
     */
    referenceValue: boolean | string | number;
}
/**
 * Some HTML to be rendered in the form
 */
export interface HTMLRenderer {
    type?: 'HTML';
    htmlData: string;
    showOn?: ShowOnProperty;
}
/**
 * inserts a simple divider
 */
export interface Divider {
    type: 'Divider';
    showOn?: ShowOnProperty;
}
/**
 * Used to put a button into the form
 */
export interface Button {
    type: 'Button';
    buttonType: TheButtonsType;
    text: Text;
    options?: Options1;
}
/**
 * Options for the button
 */
export interface Options1 {
    /**
     * The layout's CSS classes
     */
    cssClass?: string;
    nativeSubmitOptions?: NativeSubmitSettings;
    [k: string]: unknown;
}
/**
 * Settings if native form submit is used
 */
export interface NativeSubmitSettings {
    /**
     * Specifies where to send the form-data when a form is submitted
     */
    formaction?: string;
    /**
     * Specifies how to send the form-data
     */
    formmethod?: 'get' | 'post';
    /**
     * Specifies where to display the response after submitting the form
     */
    formtarget?: '_blank' | '_self' | '_parent' | '_top';
    /**
     * Specifies how form-data should be encoded before sending it to a server
     */
    formenctype?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';
    [k: string]: unknown;
}
/**
 * Used to group buttons
 */
export interface Buttongroup {
    type: 'Buttongroup';
    /**
     * The buttons in the button group
     *
     * @minItems 1
     */
    buttons: [Button, ...Button[]];
    /**
     * Display the buttons vertical
     */
    vertical?: boolean;
}
